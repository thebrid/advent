from collections.abc import Iterable
from copy import deepcopy

from pytest import mark


def reflections(input_string: str) -> int:
    output = 0
    patterns = _parse_input(input_string)

    for pattern in patterns:
        vertical_reflections = _get_vertical_reflections(pattern)
        horizontal_reflections = _get_horizontal_reflections(pattern)
        output += _summarise(vertical_reflections, horizontal_reflections)

    return output


def reflections_with_smudge(input_string: str) -> int:
    output = 0
    patterns = _parse_input(input_string)

    for pattern in patterns:
        vertical_reflections, horizontal_reflections = _find_smudge(pattern)
        output += _summarise(vertical_reflections, horizontal_reflections)

    return output


def _find_smudge(pattern: list[list[bool]]) -> tuple[list[int], list[int]]:
    vertical_reflections_original = _get_vertical_reflections(pattern)
    horizontal_reflections_original = _get_horizontal_reflections(pattern)
    for y, row in enumerate(pattern):
        for x in range(len(row)):
            copy = deepcopy(pattern)
            copy[y][x] = not copy[y][x]

            vertical_reflections = _get_vertical_reflections(copy)
            horizontal_reflections = _get_horizontal_reflections(copy)

            for vertical_reflection in vertical_reflections:
                if vertical_reflection not in vertical_reflections_original:
                    return [vertical_reflection], []

            for horizontal_reflection in horizontal_reflections:
                if horizontal_reflection not in horizontal_reflections_original:
                    return [], [horizontal_reflection]

    raise RuntimeError("Could not find smudge")


def _summarise(vertical_reflections: list[int], horizontal_reflections: list[int]) -> int:
    return sum(vertical_reflections) + 100 * sum(horizontal_reflections)


def _get_vertical_reflections(pattern: list[list[bool]]) -> list[int]:
    output = list[int]()

    for x in range(1, len(pattern[0])):
        if all(
            row[x + x_offset] == row[x - 1 - x_offset]
            for x_offset in range(0, min(len(pattern[0]) - x, x))
            for row in pattern
        ):
            output.append(x)

    return output


def _get_horizontal_reflections(pattern: list[list[bool]]) -> list[int]:
    output = list[int]()

    for y in range(1, len(pattern)):
        if all(pattern[y + y_offset] == pattern[y - 1 - y_offset] for y_offset in range(0, min(len(pattern) - y, y))):
            output.append(y)

    return output


def _parse_input(input_string: str) -> Iterable[list[list[bool]]]:
    pattern = list[list[bool]]()
    for line in input_string.splitlines():
        if line:
            pattern.append([char == "#" for char in line])
        else:
            yield pattern
            pattern = list[list[bool]]()
    yield pattern


EXAMPLE_INPUT = """#.##..##.
..#.##.#.
##......#
##......#
..#.##.#.
..##..##.
#.#.##.#.

#...##..#
#....#..#
..##..###
#####.##.
#####.##.
..##..###
#....#..#"""

PUZZLE_INPUT = """#..##..
#.##.##
#####..
#..#.#.
.####..
#.#.#..
#.#.#..

##.##.###
##.##.###
..####..#
###.#.###
###.#..#.
#.###....
###.#...#
###.#...#
#.###....
###.#..#.
###.#.###
..##.#..#
##.##.###

..####.
#......
.##..##
#.#..#.
#......
#.#..#.
#.#..#.
#......
###..##
.##..##
#......

#..####..#..#..
.###..###.##.##
.#......#.####.
###....########
##......######.
..##..##..##..#
.#..##..#.##.#.
.###..###.##.##
#..####..####..
..#....#..##..#
.########....##
#..####..####..
#.######.#..#.#
###.##.########
.#.#..#.#.##.#.
....##.........
#.##..##.#..#.#

#..###..#..
#..###..#..
###.#####..
#####.##..#
#.#.#....##
.##..##....
#.#...##.#.
####...####
####...####
#.#...##.##
.##..##....
#.#.#....##
#####.##..#

...#...#.#.##
##....#.##.#.
##..#.#.#....
...##.#####..
###..#...#...
###.#....###.
##..####....#
...#.####...#
##...##.###.#
##...##.###.#
..##.####...#
##..####....#
###.#....###.
###..#...#...
...##.#####..
##..#.#.#....
##....#.##.#.

###.##..#
#####....
#####....
##....##.
####.#..#
...#.....
.#.######

##..####.###.
###.##..##...
...####.#..##
...####.#..##
######..##...
##..####.###.
#.##...##..#.
.#..##..##..#
.#..##..##..#
#.##...##..#.
##..####.###.
######..##...
...####.#..##
...####.#..##
###.##..##...
##..####.###.
.##.#.....#.#

...#.#..##..#.#
.###..#.##.#..#
..##..######..#
..#.##......##.
#.###.##..##.##
.....#......#..
.....#......#..
#.###.##..##.##
..#.##......##.
..##..######..#
.###..#.##.#..#
...#.#..##..#.#
.##.##......##.
..#...#....#...
.#...#########.

###.######.
#.#..#...#.
.###...#.##
###.#.##...
##.##...#.#
##.##...#.#
###.#.##...
.###..##.##
#.#..#...#.
###.######.
###.######.
#.#..#...#.
.###..##.##

######.
..###..
.#.##.#
#....#.
#....#.
.#.##.#
..###..
######.
#####..

##....#.#
##..#.#.#
.#...###.
#..#.....
.##.....#
#.#.#..#.
.##..###.
##...####
##.#####.
##.###...
.####....
.####....
##.###...

#...##.#...#.#.
#.#######...###
###..##....##.#
....#.#.###...#
....#.#.###...#
###...#....##.#
#.#######...###
#...##.#...#.#.
.###...##.##...
.###...##.##...
#...##.#...#.#.

###..#.
###..#.
.####..
.##....
###..#.
.####.#
.##..#.
.##.###
#####..
#..#...
.#..##.
.#..##.
#..##..

.#####.#...#..#..
.#####.#...#..#..
#.#.##...#...##.#
##...##.##..###.#
....#..####....##
....#..#.##....##
##...##.##..###.#

#####.#.#
#...##..#
#######.#
######.##
.##.#..##
#####..#.
#..###.##
#..#.##..
.##....##
#####.###
#####.###
.##....##
#..#.##..
#..###.##
#####..#.

..#....#####.
..#.##.####.#
##.##.######.
....####..###
########..###
....#.##..##.
##.#.########
......#.##.#.
..#..##....##

##..#..#.#.#.
##..#..#.#.#.
##.#.##.....#
.#.#.##..###.
..#...####..#
#.....#..####
#..#..#..####
..#...####..#
.#.#.##..###.

.#..##..#..##..#.
#........######..
##########.##.###
.#..##..#.####.#.
....##....#..#...
###....###.....##
.###..###......##
#..#..#..######..
##......########.
###.##.###.##.###
##..##..##....##.
#.######.#.##.#.#
.#......#.####.#.
####..#####..####
##.####.###..###.

.##...##...
#...#....#.
#..########
.##.#....#.
#..##....##
#..##....##
......##...

....#####.##.
#####.#.##.##
....#.##.#..#
.....#...#..#
####..####..#
#########..##
#######.....#
#######.#.###
....#.#....#.
....##....###
.##...####..#

#....#.###..###.#
##..##.##.##.##.#
.####.#........#.
..##..##.####.##.
#.##.####....####
....#..#.#..#.#..
#....###.#..#.###
.......#.####.#..
#.##.#...#..#...#
#.##.#.##....##.#
.#..#..#.####.#..
#.##.#.#.####.#.#
.####.###.##.###.

.....#..#.....###
...#.#..#.#....##
#####.##.######..
.#..######..#....
.##.##..##.##.#..
.###.####.###..##
#.#........#.###.
.#..#.##.#..#.#..
....#.##.#.....##
####......#######
#.#.#....#.#.#...
.###.#..#.###....
####..##..####.##

##..####...#.
##..##.#.#..#
######.###...
.......#....#
#....###....#
.......#..#..
..##....#.#.#

.#.........
..#.#######
##.##...##.
###.####...
###.####...
##.##...##.
..#.#######
.#.........
.###.###..#
####.#.##.#
#.####.#..#
#.####.##.#
####.#.##.#
.###.###..#
.#.........

####....##....#
...#....##....#
.##...#....#...
#..#.##.##.##.#
.###.##.##.##.#
.###.##.##.##.#
##.############

....######.....
#....#..#....##
..##..##..##...
..##########...
..##.####.##...
..####..####...
.##.....#..##..
####..##..#####
#.##########.##
#.##..##..##.##
.###.#..#.###..
#.#.#....#.#.##
#...##..##...##

.......#.
#..#.#..#
.#####.##
####..#.#
#####.#..
.##.##.#.
.##.##.#.
#####.#..
####..#.#

.#..#..#..###..#.
#.##.#.####..##..
######.##.###.#..
######.##.###.#..
#.##.#.####..##..
.#..#..#..###..#.
#....#..#..##.#..
#....####..#####.
..##..#...##..#..
###############..
...#..####.#.##.#

.##..######
....#######
.##.#...#.#
#####.###.#
######.##.#
....###....
.....#...#.
#..###..###
.....##...#
.##..##...#
#..#...##.#
.##....#.##
.##...##.##
#..#...##.#
.##..##...#

#....#..####..#..
#.....###..###...
.#.#..##....##..#
##..#...####...#.
.##.##.....#..##.
..#.#..#....#..#.
#.#######..######
.#...#..####..#..
.#..##.#....#.##.
.#.####......####
.#.####......####

......##.##.##.
..####.#....###
....##........#
#####..#....#..
........####...
..###..######..
...##..######..
...#..###..###.
#####..#.##.#..
###..#..####..#
..#.###.#..#.##

#.....##.....
.###..##..###
.##..#..#..##
###.#....#.##
###...##...##
.###..##..###
....##..##...
#............
##.##....##.#
.##..#..#..##
.####....####

#...#.#.##...
...###.##..##
..###.#.##...
.###.###...#.
##.#...#.###.
#...###.#.#.#
..#####...#.#
..#####...#.#
#...###.#.#.#
##.#...#.###.
.###.###...#.
..###.#.##...
...#.#.##..##
#...#.#.##...
.#.#....####.
.#.#....####.
#...#.#.##...

..#..#.#..##..#
#..#.#....##...
.#.#####......#
#..###.###..###
##.#...###..###
..##.##....#...
#..###.##....##
...####.######.
...####.######.

.#.##.#.##.#.
.#.####....##
.##...######.
.##...######.
.#.####....##
.#.##.#.##.#.
.#######..###
#..####....##
..###.#...##.
..###..#..#..
#..#.########

....#..#.
####.#.#.
...###.##
..#..##.#
##...#...
##.##.#..
##.....#.
##...##.#
...####.#
.#...####
####...#.
###..###.
..#####.#
..#..##.#
..#..##.#

##.#.#..##..##.#.
.###.##.#....###.
#..#.#.#.##.#.###
#....#.########.#
.....#..#.###.##.
#....###....#####
.###....###...###
.###....###...###
#....###....####.
..####.###..##..#
..####.###..##..#
#....###....####.
.###....###...###
.###....###...###
#....###....#####

.###.##.###..
.##.####.##..
..########...
.#..####..#..
..#.#..#.#...
.#.#....#.#..
..##.##.##...
#.##....##.##
.##.####.##..
#.##....##.##
..#..##..#...
#.#.#..#.#.##
.#........#..
#....#.....##
.###....###..

..##.#..#.#
..##.##...#
..##..#...#
..##.#..#.#
##.#..####.
...#..#.#.#
...###.#.##
###.##..###
##..##.##..
...##..#..#
..###.##.#.
##...###..#
..#..####.#

##.##.#.##....#
.........##.#..
....#...###.#.#
####..#.####.##
.#..##...##.##.
#.#.##.#####.#.
.#.#.#...#..###
#..#.####..##.#
#..#.#.###.##.#
##..#.##..#####
#...#.##..#####
.#..#####..##.#
..#...#.######.
..#...#.######.
.#..#####..##.#
#...#.##..#####
##..#.##..#####

.#..###.##.
..#.####..#
####...#..#
...#.##....
###.####..#
#####...##.
###.#..####
##.#.#.####
....#.#.##.
..##.###..#
..####.....

#.##.#.###.##..
####.##.#..#..#
#..#.#.####...#
#..##.##.####..
#..######...##.
.....##.####..#
####.##..######
#######..#..#.#
#..##.#.#.##...
.##...#.#.#....
....#..#...##.#
#..#...##.#.#..
.##...#..##.#.#
####....#.#.#..
#####.###.####.
......##.#....#
......##.#....#

#.###.##.###.#.
#.###.##.###.#.
...#.#..#.#...#
##.##.##.##.##.
.##.#.##.#.##..
#.#........#.#.
.#.#.####.#.#..
....#....#.....
.############..
#.##..##..##.##
.#####..#####.#
#....#..#......
.#..#....#..#.#
#..#.#..#.#..##
##....##....###

...###.
....##.
...#..#
...##.#
..#####
#.#.##.
.#..##.
.#..##.
#.#.##.
..#####
...##.#
...#..#
....##.

#.#......
..#.#..#.
..###..##
##...##..
###.##.#.
.#.##..##
###......
##.......
##...##..
##...##..
##.......

...#.#.
###..##
#...#..
..#.#..
..#.#..
#...#..
###..##
...#.#.
.######
.######
...###.

#...#.#####....##
#.####..##......#
######.####....##
###.##.#.#.####.#
.#.#.##...#....#.
.##......#.####.#
..######...####..
#..#..##....##...
###.#..#.........
#....##...##..##.
.#.####.##.#..#.#
#..#...#..##..##.
#.#..###...####..
#...#...##.#..#.#
#...##.#...####..
#...##.#...####..
#...#....#.#..#.#

##.....##..###.
#......##..###.
#..##..##.###..
......#...#####
.#####....##.##
..#...#.##....#
.##.#.###.#...#
.##.#.###.#...#
..#...#.##....#
.#####....##.##
......#...#####

#.##....##.##
.###....###..
#.#..##..#.##
.###....###..
...######....
.##########..
...#....#....
.##.#..#.##..
#.##....##.##
#..........##
#...#..#...##
##...##...#..
.#..####..#..

####.###.#...
####.###.#...
.##.#....#.##
######..#.###
######.#.#.#.
#..#..##..#..
.##....##.###
.....##.#.##.
#..####..#.##
#....##.####.
.##..##.#..#.
.##..#..##...
####.##..##.#
....#.##.#..#
....######..#
......##..#.#
####..#.##..#

#.##.##.##.##.##.
.###....###......
##..#..#..##.#..#
.#.#....#.#.##..#
##.##..##.##..##.
##.#....#.##..##.
.#.##..##.#.#.##.
#.########.#.....
##.#.##.#.####..#
..##.##.##..##..#
.##########......
.#.##..##.#..####
...######.....##.
###.####.###.....
.#.######.#..####
.###.##.##...####
.#.#....#.#..####

####.###.
....##...
......###
....###..
#..##..#.
######...
######...
#..##..#.
....###..
......###
....##...
####..##.
.##.#.##.
####...##
#..##.##.
......###
#####....

##..####..##.
##.######.##.
.....##.....#
##.#.##.#.###
##.##..##.##.
.#.#....#.#..
##...##...##.
#####..######
##..####..###
##...##...##.
..########..#
##.#.##.#.###
##...##...###
####.##.#####
##.#.##.#.##.
##.######.##.
..#.####.#..#

#.##.##......##.#
#.##.##......##.#
.#.##..##......#.
#.##..##..##...#.
##....#...#....##
.#.###..###......
##.##..#....##.##
##.##..#....##.##
.#.###..###......
##....#...#....##
#.##..#...##...#.
.#.##..##......#.
#.##.##......##.#

.#..#..
.##.##.
.###..#
##.####
##.####
.###..#
.##.##.
.#..##.
#..###.
..#.###
#.#....
###...#
###...#
#.#....
..#.###

...##...####.
####.........
..#..###.##.#
###..#.######
##..#########
###..........
..#..##......
##...#..#..#.
....##.###.##
..#..########
....#.#......
##.#.########
..###........
###.#########
...#...######
..#.#.#######
#####..#....#

....#...#
#.#.#.#..
#.#.#.#..
.#..#...#
##.#.####
..##.#.#.
.....#...
#####...#
####...#.
##....#.#
..#...###
..#...###
##....#.#

....#...#
####.##.#
.##.##...
####....#
.##..####
.##...###
####....#

##.#..#
####..#
###.#..
##..##.
##..##.
..#.#..
####..#

.....#..#
###......
#.#######
#.#######
..##.....
##.######
..#######
.########
...##....

##.#..#.#
.#.#.##..
##.##..##
....###.#
....###.#
##.##..##
.#.#.##..
##.#..###
..###....
.##..####
.##..####
..###....
##.#..###

......##.#.
#####.#.##.
.##.#.#####
.....##.#.#
....##.#.##
#..#.##.#.#
#..#.##.#.#
....#..#.##
.....##.#.#
.##.#.#####
#####.#.##.
......##.#.
.......##.#
#..###..#..
.##..##.###

.#.#.#..#
#..#..##.
##..##..#
##.##.##.
#.#.##.##
....#####
#...#....
.#.#.....
.####....
..#......
..#......
.####....
.#.#.....

......###..
..###.#.#..
#......#.##
.####..#.##
##.###.#...
##.####....
.#....#..##
##.##..#...
#.#.###....
..#..######
..#..######
#.#.###....
#####..#...
.#....#..##
##.####....
##.###.#...
.####..#.##

.####..##
##..##..#
#....###.
#....###.
##..###.#
.####..##
.#..#.#.#
######.##
.####..#.

###.#..#.
###.#..#.
.#..#.#.#
###..##..
..#.###.#
...#.####
.###..###
#...#.###
#...#.###
.#.#..###
...#.####
..#.###.#
###..##..
.#..#.#.#
###.#..#.

#..#...#..#.#.#
#..###......###
.....########..
#..###.####.###
........##.....
#..###......###
....#...##...#.
####.##.##.##.#
#..##.#.##.#.##
####....##....#
####.#..##..#.#
......##..##...
.##.##.####.##.

#...##...#...
######...##.#
#.####...##.#
.#.######.#..
.##...##.#.#.
.##...##.#.#.
.#.######.#..
#.####...##.#
######...##.#

...###..#.#...#
##.#..###.#..#.
...######.##.##
...######.##.##
##.#..###.#..#.
...###..#.#...#
..#..#.##.##.#.
..#.#.##.#...##
...##....#....#
##.###..#...#.#
.#..###..###.##
..##.###..#..#.
..#..#####.##.#
##.##.#.####.#.
####...####.##.
##..#.#..#.#...
..#.#.#.#.#.##.

..##.#.#.##
.###.#.#.##
.#..#......
####.##.#.#
#.#..##..##
.##..#.#.#.
###........
##....#.##.
.###.####.#
......#.##.
##.#..##.#.
#...##.#...
..#..####.#
..#..####.#
#...##.#...

#.########.#..#..
#.########.#..#..
##.#.##.#.###.#.#
#..##..##..#.###.
....#..##........
#....##....##.#..
###......###..#.#
#.###..###.##....
..##.##.##..#.#..
#..######..#..##.
..###..###.......
##..#..#..##.###.
##.######.###.###
#....##....#...#.
...##..##...#.###

#####.####.
##..#..#.#.
##..###....
###.###.#.#
....####.#.
..####.#.#.
######..#..
######..#..
..####.#.#.
....####.#.
###.###.#.#
##..###....
##..#..#.#.
#####.####.
###.#.####.
...###.#.#.
.###.###...

..##.#.####.#.##.
..##.#.####.#.##.
.##.#.##..##.#.##
.#.#..######.##.#
#...###....###...
##.############.#
..##############.
...#####..#####..
#.#....####....#.
##..##......##..#
.#.##..####..##.#
#.##.#.#..#.#.##.
..#..#.#..#.#..#.
.##.##..##..##.##
#.##.#.#..#.#.##.

####.##.#
.....####
........#
#..#.##..
....#.##.
.##.##.##
.##.##..#

##.##..##.#####
##..#..#..###..
.#.#.##.#.#.###
.#.#.##.#.#..##
.#..#..#..#.#.#
##..#..#..##...
.#...##...#.###
..#.####.#..#..
##.#.##.#.##.##
.###....###....
##........###..

.#.####.#.##.#.
##......######.
##########..###
#...##..##..##.
.#.#..#.#.##.#.
..######..##..#
##.#..#.##..##.

.#.#####.#.####
#...##..#######
..#...##.......
##......#..####
.####.##.######
.###..#########
##.##.#.##.....
###.#.##.##.##.
..#.###...#....
..#.#...#.#....
.#.#.....######
#####.###.#####
..#..##.##.####
.#..#....#.####
.#....#.#.#....

#.#.####.#.
.#.##..##.#
#...#..#...
####....###
...#.##.#..
...##..##..
...##..##..
...#.##.#..
####....###
#...#..#...
.#.##..##.#
#.#.####.#.
.....##....
..##....##.
###.#######
.#.#.##.#.#
####.##.###

##..##..##..###
##.###..###.##.
###.#.##.#.####
###.#.##.#.####
##.###..###.##.
##..##..##..###
#..###..###..##
..#.##..##.#...
#.#..##.#..#.##

....##...#.###.#.
####.#...##.###..
.##.####.##.##.##
####.#.##...#.#.#
....###.#.####..#
#..###.##.#.#.#..
#..###.#..##..#.#
.##...###...###.#
.##.##.###...#.#.
.##.##.###...#.#.
.##...###...###.#
#..###.#...#..#.#
#..###.##.#.#.#..

#######.##.#....#
#.##..#..##......
..#..####...##...
######..#...#...#
...#....#.#.##...
.#..##....#.##..#
#..#.##.###.###.#
...#.###......#..
#.##.#.##..#..###
####..######.##.#
####..######.#..#
#.#.##.#.##.#....
#.#.##.#.##.#....
####..######.#..#
####..######.##.#

.#.####.#.#.##.
.#.####.#..###.
.#..##..#.#.###
##......##.##.#
##.####.####.##
..##..##..#.###
..##..##..#####

#.#####..#.#.#...
..##..##.#.####..
..#.##.#.#.#..#..
.#.##.#.#...#.###
.##..##.....#####
.###...#.#..#....
#..#..##....#.###
.#.###.....##....
..#.#####.##..#..
.....###...###.##
.....###...###.##
..#.#####.##..#..
.#.###.....##....
#..#.###....#.###
.###...#.#..#....

##.####..##
.#...#.##.#
.#..#.#..#.
.###.......
####.#.##.#
##.#.#.##.#
.###.......
.#..#.#..#.
.#...#.##.#
##.####..##
####.######
#..####..##
###..######
#####.####.
.#...######
####...##..
#.#########

#.##..##.#..#
#.######.#.##
..#....#..###
#........####
.#.####.#....
##..##..#####
##..##..###..
..........###
####..####...
##..##..###..
####..#######

#.##..####.##.#
.###.####.#.##.
..#.#.##.#...##
....#.##....###
#.#.##.#####.##
..#....#.....##
..#....#.....##
#.#.##.#####.##
....#.##....###
..#.#.##.#...##
.###.####.#.##.
#.##..####.##.#
##...##.#.###..
##...##.#.###..
#.##..####..#.#
.###.####.#.##.
..#.#.##.#...##

#######.#..
#.##.#....#
......##...
##..######.
..##...#.#.
.####..##..
#....#.##..
.#..#.#..##
.......#.#.
......##.#.
.#..#.#..##

#..#..#.####.
.##.###......
..#..##.#..##
#..#######..#
#####....####
#..##.#.##..#
####.###..##.
######.#..#.#
....###.##.##
......#......
#..#..#.##...
####.##...##.
####.##...##.

###..####
.#...#.##
#..###.##
#.#.##...
..#.#####
####..#..
.##.##.##
#.##.....
#.###....

.####.#
.####.#
.#.#.#.
.....#.
##..#..
...###.
...###.
##..#..
.#...#.
.#.#.#.
.####.#

..#..##.#........
##.##.#...###..##
##.##.#...###..##
..#..#..#........
#..##.###..######
###.##.##.#######
..#...#.##...##..
.#....#.#........
##.#.####..#....#
#.#.##....#######
.#####...#.......
##.####.#.###..##
#.######.###.##.#
#.#.#.####.#....#
...#######.######

.##..##
#..##..
#..#.##
....#..
....#..
#..#.##
#..##..
.##..##
######.
####..#
...#.#.

.##.#.####.
.##.#.####.
.####..#.##
.#####.#.#.
#.#..#.###.
##.#######.
..####....#
#.##..###.#
#.##..###.#
..##.#....#
##.#######.
#.#..#.###.
.#####.#.#.
.####..#.##
.##.#.####.

..#......#....#
.####..####..##
#.#.####.#.##..
.#.######.#..#.
#.########.##.#
#....##....##..
...##..##......

#.##...##
..#.#.###
##...####
.###.....
.###.....
##...####
..###.###
#.##...##
####.####
.####.#.#
#..#.#.##
######.#.
..######.
##.##.###
##.##.###

#....#..#....#.##
.###......###.#..
.#..######..#..##
.#.#.####.#.#....
.#.##....##.#..##
...##.##.##....##
...###..###....##
###..####..###...
..#.#.##.#.......
...########......
######..#########
..##..##..##.....
.....####.....###
#.##.#..#.##.##..
.#...#..#...#..##

...##.#
...###.
###.###
###.###
...###.
...##.#
###..#.
.####..
.#.....
#.#....
#.#....
.#.....
.####..
###..#.
..###.#

#.#....#...
#.#.#..#...
#.#.#..#...
#.#....#...
###.....#.#
..#.#....##
#..#.##...#

#.##.##########
.####.###....##
.........####..
#....#.#.....##
.#..#.###.##.##
#....#.#.#..#.#
.#..#.#########
......##.####.#
..##...###..###"""


@mark.parametrize(("input_string", "expected_output"), [(EXAMPLE_INPUT, 405), (PUZZLE_INPUT, 34202)])
def test_reflections(input_string: str, expected_output: int) -> None:
    assert reflections(input_string) == expected_output


@mark.parametrize(("input_string", "expected_output"), [(EXAMPLE_INPUT, 400), (PUZZLE_INPUT, 34230)])
def test_reflections_with_smudge(input_string: str, expected_output: int) -> None:
    assert reflections_with_smudge(input_string) == expected_output
