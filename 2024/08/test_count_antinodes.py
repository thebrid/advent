from collections import defaultdict
from dataclasses import dataclass

from pytest import mark


@dataclass(eq=True, frozen=True)
class Coord:
    x: int
    y: int


AntennaMap = defaultdict[str, list[Coord]]


def _find_antinodes_for_frequency(coords: list[Coord], size: Coord, repeat: bool) -> set[Coord]:
    output = set[Coord]()

    for index1 in range(0, len(coords) - 1):
        for index2 in range(index1 + 1, len(coords)):
            coord1 = coords[index1]
            coord2 = coords[index2]

            diff = Coord(x=coord2.x - coord1.x, y=coord2.y - coord1.y)

            if repeat:
                current_pos = coord1
                while 0 <= current_pos.x < size.x and 0 <= current_pos.y < size.y:
                    output.add(current_pos)
                    current_pos = Coord(x=current_pos.x - diff.x, y=current_pos.y - diff.y)

                current_pos = coord2
                while 0 <= current_pos.x < size.x and 0 <= current_pos.y < size.y:
                    output.add(current_pos)
                    current_pos = Coord(x=current_pos.x + diff.x, y=current_pos.y + diff.y)

            else:
                antinode1 = Coord(x=coord1.x - diff.x, y=coord1.y - diff.y)
                antinode2 = Coord(x=coord2.x + diff.x, y=coord2.y + diff.y)

                if 0 <= antinode1.x < size.x and 0 <= antinode1.y < size.y:
                    output.add(antinode1)

                if 0 <= antinode2.x < size.x and 0 <= antinode2.y < size.y:
                    output.add(antinode2)

    return output


def _find_antinodes(antenna_map: AntennaMap, size: Coord, repeat: bool) -> set[Coord]:
    output = set[Coord]()

    for _, coords in antenna_map.items():
        output |= _find_antinodes_for_frequency(coords, size, repeat)

    return output


def _parse_input(input_str: str) -> tuple[AntennaMap, Coord]:
    lines = input_str.splitlines()
    size = Coord(x=len(lines[0]), y=len(lines))
    antenna_map = AntennaMap(lambda: list[Coord]())

    for y, line in enumerate(lines):
        for x, char in enumerate(line):
            if char != ".":
                antenna_map[char].append(Coord(x=x, y=y))

    return antenna_map, size


def count_antinodes(input_str: str, repeat: bool) -> int:
    antenna_map, size = _parse_input(input_str)
    return len(_find_antinodes(antenna_map, size, repeat))


EXAMPLE_INPUT = """............
........0...
.....0......
.......0....
....0.......
......A.....
............
............
........A...
.........A..
............
............"""
PUZZLE_INPUT = """....................................8.............
..................E...............................
.................................g................
...........................................l...b..
..C...........s..............8..........b.........
..................3..1........................b...
............N....3.....................1.....b....
.....................N.....8....1..............2..
..q....................................P..........
......................N...........................
...........E.................................l....
.............S.....c.............T..2v............
.........w....E........q............L.....P.....l.
........w..............................a...V......
...........t..................v..V................
.....w.C............................V....4.....L..
........................................I.n..T....
.....E.5..C...8....3..q...........................
...............s..0...A........W...........a....T.
...............A................vPT...L..W..e.4...
...........Cw..................2.....G.p.....4....
....S........q........s.............a.............
S.............c......e....................V.......
......5...........................................
....5.............................................
...........................I............g.........
...............c.........A........................
.................s.............G.............etg..
.........5...L.........f...v......W...............
............................0.W.....I........t....
..................................................
...................f...........Q.0................
..............1m9.f..........0........3.........F.
..f...9................B..........................
...........S...........................F......e...
........c.............n.....Q.....................
.....N...............B............g..7....t.......
..........B.........P.......G.....................
..m...........................Q...................
.............m.....................p...........F..
.....M..B......Q..i.....................7.4.......
............M..................7..................
...........n......................................
................................p.....6.F.7.......
..........M...........p.........6.................
.M............i...................................
..............................G...................
..............li.......................6..........
.....9.....................i...6..................
.....n.............................9.............."""


@mark.parametrize(
    ("input_str", "repeat", "expected_output"),
    [(EXAMPLE_INPUT, False, 14), (PUZZLE_INPUT, False, 280), (EXAMPLE_INPUT, True, 34), (PUZZLE_INPUT, True, 958)],
)
def test_count_antinodes(input_str: str, repeat: bool, expected_output: int) -> None:
    assert count_antinodes(input_str, repeat) == expected_output
